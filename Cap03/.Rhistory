setwd("~/Projects/BigDataRAzure")
# Lista de Strings
lista_caracter1 = list('A', 'B', 'C')
# Lista de Strings
lista_caracter1 = list('A', 'B', 'C')
lista_caracter1
lista_caracter2 = list(c('A','A'), 'B', 'C')
lista_caracter2
lista_caracter3 = list(matrix(c('A','A', 'A', 'A'), nr=2), 'B', 'C')
lista_caracter3
lista_caracter1
lista_caracter2
lista_caracter3
# Lista de números inteiros
lista_inteiros = list(2,3,4)
lista_inteiros
lista_numerico = list(1.90, 45.3, 300.5)
lista_numerico
lista_complexos = list(5.2 + 3i, 2.4+-2i)
lista_complexos
lista_logicos = list(TRUE, FALSE, FALSE)
lista_logicos
lista_composta1 = list("A", 3, TRUE)
lista_composta1
lista1 <- list(1:10, c('Zico', 'Ronaldo', 'Garrincha', rnorm(10)))
lista1
?rnorm
lista1[1]
lista1[2]
lista1[[2]][1]
lista1[[2]][1] = 'Monica'
lista1
lista1
lista1 <- list(1:10, c('Zico', 'Ronaldo', 'Garrincha'), rnorm(10)))
lista1 <- list(1:10, c('Zico', 'Ronaldo', 'Garrincha'), rnorm(10)))
lista1 <- list(1:10, c('Zico', 'Ronaldo', 'Garrincha'), rnorm(10))
lista1
Slicing da Lista
# Slicing da Lista
lista1[1]
lista1[2]
lista1[[2]][1]
lista1[[2]][1] = 'Monica'
lista1
names(lista1) <- c('inteiros', 'caracters', 'numéricos')
lista1
vec_num <- 1:4
vec_char <- c("A", "B", "C", "D")
lista2 <- list(Numeros = vec_num, Letras = vec_char)
lista2
lista2 <- list(elemento1 = 3:5, elemento2 = c(7,2,3,5))
lista2
lista1
lista1[inteiros]
lista1['inteiros']
lista1$caracters
length(lista1$inteiros)
# verificar comprimento da lista
length(lista[1])
# verificar comprimento da lista
length(lista1)
# Mode dos elementos
mode(lista1$inteiros)
# Mode dos elementos
mode(lista1$inteiros)
mode(lista1$numéricos)
mode(lista1$caracters)
lista3  <- c(lista1, lista2)
lista3 <- c(lista1, lista2)
lista3
lista3 <- c(lista1, lista2)
lista3
# Transformando um vetor em lista
v = c(1:3)
v
l = as.list(v)
v = c(1:3)
v
l = as.list(v)
l
l
l$1
l[1]
length(l[1])
mat = matrix(1:4, nrow = 2)
mat
vec = c(1:9)
vec
c(mat,vec)
vec = c('1', '2', '3')
vec
c(mat,vec)
list(mat,vec)
lst = list(mat,vec)
lst
# Dividindo uma string em caracteres
?strsplit
strsplit("Histogramas e Elementos de Dados", NULL)
strsplit("Histogramas e Elementos de Dados", " ")
string1 <- c("Esta é a primeira parte da minha string e será a primeira parte do meu vetor",
"Aqui a minha string continua, mas será transformada no segundo vetor")
string1
string2 <- c("Precisamos testar outras strings - @???!§$",
"Análise de Dados em R")
string2
str_c(c(string1, string2), sep = "")
library(stringr)
str_c(c(string1, string2), sep = "")
# String
texto <- "Isso é uma string!"
texto
x = as.character(3.14)
x
class(x)
nome = "Nelson"; sobrenome = "Mandela"
paste(nome, sobrenome)
cat(nome, sobrenome)
sprintf("A %s é nota %d", "Data Science Academy", 10)
texto <- "Isso é uma string!"
substr(texto, start=12, stop=17)
?substr
nchar(texto)
tolower("Histogramas e Elementos de Dados")
toupper("Histogramas e Elementos de Dados")
library(stringr)
str_c(c(string1, string2), sep = "")
?stringc
?str_c
str_count(string2, "s")
library(stringr)
install.packages("stringr")
library(stringr)
str_c(c(string1, string2), sep = "")
str_count(string2, "s")
str_locate_all(string2, "s")
str_locate_all(string2, "os")
getwd()
df <- data.frame()
class(df)
df
# Criando vetores vazios
nomes <- character()
idades <- numeric()
itens <- numeric()
codigos <- integer()
df <- data.frame(c(nomes, idades, itens, codigos))
df
pais = c("Portugal", "Inglaterra", "Irlanda", "Egito", "Brasil")
nome = c("Bruno", "Tiago", "Amanda", "Bianca", "Marta")
altura = c(1.88, 1.76, 1.53, 1.69, 1.68)
codigo = c(5001, 2183, 4702, 7965, 8890)
pesquisa = data.frame(pais, nome, altura, codigo)
pesquisa
olhos = c("verde", "azul", "azul", "castanho", "castanho")
pesq = cbind(pesquisa, olhos)
pesq
olhos = c("verde", "azul", "azul", "castanho", "castanho")
pesq = cbind(pesquisa, olhos)
pesq
str(pesq)
str(pesq)
# Criando vetores
pais = c("Portugal", "Inglaterra", "Irlanda", "Egito", "Brasil")
nome = c("Bruno", "Tiago", "Amanda", "Bianca", "Marta")
altura = c(1.88, 1.76, 1.53, 1.69, 1.68)
codigo = c(5001, 2183, 4702, 7965, 8890)
# Criando um dataframe de diversos vetores
pesquisa = data.frame(pais, nome, altura, codigo)
pesquisa
olhos = c("verde", "azul", "azul", "castanho", "castanho")
pesq = cbind(pesquisa, olhos)
pesq
str(pesq)
dim(pesq)
length(pesq)
pesq$pais
pesq$nome
pesq[1,1]
pesq[3,2]
nrow(pesq)
ncol(pesq)
head(pesq)
head(mtcars)
tail(pesq)
tail(mtcars)
?mtcars
View(mtcars)
nrow(mtcars)
altura
pesq[altura < 1.60,]
pesq[altura < 1.60, c('codigo', 'olhos')]
pesq
names(pesq) <- c("País", "Nome", "Altura", "Código", "Olhos")
pesq
pesq
pesq[Altura>1.8]
pesq[pesq$Altura>1.8]
pesq[pesq$Altura<1.60]
pesq$Altura
pesq$Altura < 1.6
altura>1.6
pesq[pesq$Altura<1.60,]
pesq[pesq$Altura<1.60,c('Codigo', 'olhos')]
pesq[pesq$Altura<1.60,c('Codigo', 'Olhos')]
pesq[pesq$Altura<1.60, c('Codigo', 'Olhos')]
pesq[pesq$Altura<1.60, ]
pesq[pesq$Altura<1.60, c('Código', 'Olhos')]
colnames(pesq) <- c("Var 1", "Var 2", "Var 3", "Var 4", "Var 5")
rownames(pesq) <- c("Obs 1", "Obs 2", "Obs 3", "Obs 4", "Obs 5")
pesq
olhos = c("verde", "azul", "azul", "castanho", "castanho")
pesq = cbind(pesquisa, olhos)
pesq
pacientes <- data.frame(read.csv(file = 'pacientes.csv', header = TRUE, sep = ","))
getwd()
setwd("~/Projects/BigDataRAzure/Cap02")
pacientes <- data.frame(read.csv(file = 'pacientes.csv', header = TRUE, sep = ","))
View(pacientes)
head(pacientes)
summary(pacientes)
pacientes$Diabete
pacientes$status
pacientes$Status
hist(pacientes$Idade)
hist(pacientes$Idade)
dataset_final <- merge(pesq, pacientes)
dataset_final
16 %% 3
16 % 3
matrix(data = meus_dados, nrow = 5, ncol = 2, byrow = T)
meus_dados = c(1:10)
matrix(data = meus_dados, nrow=5, ncol = 2, byrow = T)
matrix(data = meus_dados, nrow = 5, ncol = 2)
setwd("~/Projects/BigDataRAzure/Cap02")
getwd()
c(1:30)
length(c(1:30))
Mat_4x4 <- matrix(c(2,4,8,12), nr = 4, ncol = 4)
Mat_4x4
lista1 <- list(v_int=v_int, Mat_4x4=Mat_4x4)
v_int = c(1:30)
lista1 <- list(v_int=v_int, Mat_4x4=Mat_4x4)
lista1
# Exercício 1 - Crie um vetor com 30 números inteiros
v_int = c(1:30)
# Exercício 2 - Crie uma matriz com 4 linhas e 4 colunas preenchida com números inteiros
Mat_4x4 <- matrix(c(2,4,8,12), nr = 4, ncol = 4)
Mat_4x4
# Exercício 3 - Crie uma lista unindo o vetor e matriz criados anteriormente
lista1 <- list(v_int=v_int, Mat_4x4=Mat_4x4)
lista1
?read.table
ls
data <- read.table(file='effort.dat')
readLines("https://grodri.github.io/datasets/effort.dat",
n=10)
data <- read.table("https://grodri.github.io/datasets/effort.dat", header=TRUE)
data
class(data)
names(data) <- c("config", "esfc", "chang")
data
colnames(data) <- c("Var 1", "Var 2", "Var 3")
data
names(data) <- c("config", "esfc", "chang")
data
# Exercício 6 - Imprima na tela o dataframe iris, verifique quantas dimensões existem no dataframe iris e imprima um resumo do dataset
view(iris)
# Exercício 6 - Imprima na tela o dataframe iris, verifique quantas dimensões existem no dataframe iris e imprima um resumo do dataset
View(iris)
iris
dim(iris)
summary(iris)
View(iris)
# Exercício 7 - Crie um plot simples usando as duas primeiras colunas do dataframe iris
?plot
plot(iris$Sepal.Length, iris$Sepal.Width)
View(iris)
# Exercício 8 - Usando a função subset, crie um novo dataframe com o conjunto de dados do dataframe iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
?subst
# Exercício 8 - Usando a função subset, crie um novo dataframe com o conjunto de dados do dataframe iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
?subset
subset_iris = subset(iris, iris$Sepal.Length>7)
subset_iris
dim(subset_iris)
iris[iris$Sepal.Length>7,]
dim(iris[iris$Sepal.Length>7,])
?slice
install.packages("dplyr")
?slice
?slice
??slice
library(dplyr)
library(dplyr)
?slice
copy_data <- data.frame(iris)
tracemem(copy_data)==tracemem(iris)
copy_data <- iris
tracemem(copy_data)==tracemem(iris)
copy_data <- data.frame(iris)
tracemem(copy_data)==tracemem(iris)
sliced_data <- slice(copy_data, n=15)
sliced_data <- slice(copy_data, n=15)
sliced_data <- slice(copy_data)
copy_data
dim(copy_data)
sliced_data <- slice(iris)
sliced_data<- copy_data %>% slice(1:15)
sliced_data
dim(sliced_data)
filter(sliced_data, sliced_data$Sepal.Length == "6)
filter(sliced_data, sliced_data$Sepal.Length  > 6)
result_10 <- filter(sliced_data, sliced_data$Sepal.Length  > 6)
result_10
result_10
result_10 <- filter(sliced_data, Sepal.Length  > 6)
result_10
sliced_data
getwd()
dffdgfdgdfg
getwd()
sliced_data
result_10 <- filter(sliced_data, Sepal.Length  > 6)
result_10
sliced_data
Viwe(iris)
View(iris)
65-50
sliced_data<- copy_data %>% slice(50:64)
sliced_data
dim(sliced_data)
result_10 <- filter(sliced_data, Sepal.Length  > 6)
result_10
data <- read.table("https://grodri.github.io/datasets/effort.dat", header=TRUE)
data
class(data)
colnames(data) <- c("config", "esfc", "chang")
data
str(iris)
copy_data <- data.frame(iris)
tracemem(copy_data)==tracemem(iris)
sliced_data<- copy_data %>% slice(50:64)
# select rows by range
library("dplyr")
sliced_data<- copy_data %>% slice(50:64)
sliced_data
dim(sliced_data)
slice(copy_data, 50:64)
sliced_data<- slice(copy_data, 50:64)
sliced_data
dim(sliced_data)
sliced_data<- slice(copy_data, 50:64)
sliced_data
dim(sliced_data)
slice(copy_data, 50:64)
sliced_data
install.packages("readr")
install.packages("data.table")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("dplyr")
library(readr)
library(dplyr)
library(ggplot2)
library(scales)
library(data.table)
library(readr)
library(dplyr)
library(ggplot2)
library(scales)
library(data.table)
system.time(df_teste1 <- read.csv2("TemperaturasGlobais/TemperaturasGlobais.csv"))
setwd("~/Projects/BigDataRAzure/Cap03")
system.time(df_teste1 <- read.csv2("TemperaturasGlobais/TemperaturasGlobais.csv"))
system.time(df_teste2 <- read.table("TemperaturasGlobais/TemperaturasGlobais.csv"))
system.time(df <- fread("TemperaturasGlobais/TemperaturasGlobais.csv"))
gc()
gc()
gc()
gc()
system.time(df <- fread("TemperaturasGlobais/TemperaturasGlobais.csv"))
View(head(df))
cidadesBrasil <- subset(df, Country == 'Brazil')
df[df$City=='Brazil',]
df$City=='Brazil'
df[df$City=='Brazil',]
dim(df)
system.time(dfilter(df, Country == 'Brazil'))
system.time(subset(df, Country == 'Brazil'))
system.time(filter(df, Country == 'Brazil'))
system.time(subset(df, Country == 'Brazil'))
system.time(filter(df, Country == 'Brazil'))
system.time(subset(df, Country == 'Brazil'))
View(head(df))
head(df))
head(df)
aux = head(df)
View(head(df))
aux[aux$AverageTemperature>6,]
aux[aux$Country=='Denmark',]
df[df$Country=='Brazil',]
df[df$Country=='Denmark',]
df[df$Country=='Sweden',]
df[df$Country=='Island',]
df[df$Country=='Brazil',]
df[df$Country=='Brazil',]
system.time(ddf[df$Country=='Brazil',])
system.time(df[df$Country=='Brazil',])
system.time(subset(df, Country == 'Brazil'))
system.time(df[df$Country=='Brazil',])
system.time(subset(df, Country == 'Brazil'))
dim(df[df$Country=='Brazil',])
dim(subset(df, Country == 'Brazil'))
head(cidadesBrasil)
View(cidadesBrasil)
nrow(df)
nrow(cidadesBrasil)
dim(cidadesBrasil)
cidadesBrasil$dt <- as.POSIXct(cidadesBrasil$dt,format='%Y-%m-%d')
cidadesBrasil$Month <- month(cidadesBrasil$dt)
cidadesBrasil$Year <- year(cidadesBrasil$dt)
View(cidadesBrasil)
plm <- subset(cidadesBrasil, City == 'Palmas')
plm <- subset(plm, Year %in% c(1796,1846,1896,1946,1996,2012))
# Curitiba
crt <- subset(cidadesBrasil, City == 'Curitiba')
crt <- subset(crt, Year %in% c(1796,1846,1896,1946,1996,2012))
# Recife
recf <- subset(cidadesBrasil, City=='Recife')
recf <- subset(recf,Year %in% c(1796,1846,1896,1946,1996,2012))
p_plm <- ggplot(plm, aes(x = (Month), y = AverageTemperature, color = as.factor(Year))) +
geom_smooth(se = FALSE,fill = NA, size = 2) +
theme_light(base_size = 20) +
xlab("Mês")+
ylab("Temperatura Média") +
scale_color_discrete("") +
ggtitle("Temperatura Média ao longo dos anos em Palmas") +
theme(plot.title = element_text(size = 18))
p_crt <- ggplot(crt, aes(x = (Month), y = AverageTemperature, color = as.factor(Year))) +
geom_smooth(se = FALSE,fill = NA, size = 2) +
theme_light(base_size = 20) +
xlab("Mês")+
ylab("Temperatura") +
scale_color_discrete("") +
ggtitle("Temperatura Média ao longo dos anos em Curitiba") +
theme(plot.title = element_text(size = 18))
p_recf <- ggplot(recf, aes(x = (Month), y = AverageTemperature, color = as.factor(Year))) +
geom_smooth(se = FALSE,fill = NA, size = 2) +
theme_light(base_size = 20) +
xlab("Mês")+
ylab("Temperatura Média") +
scale_color_discrete("") +
ggtitle("Temperatura Média ao longo dos anos em Recife") +
theme(plot.title = element_text(size = 18))
p_plm
p_crt
p_recf
p_plm
p_recf
